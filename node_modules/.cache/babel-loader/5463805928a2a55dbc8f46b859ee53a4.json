{"ast":null,"code":"var LastFmBase = require(\"./lastfm-base\");\n\nvar RecentTracksStream = module.exports = function (lastfm, user, options) {\n  var that = this;\n  LastFmBase.call(this);\n  options = options || {};\n  var rate = 10,\n      isStreaming = false,\n      timeout,\n      lastPlay = null,\n      nowPlaying = null;\n  registerEventHandlers(options);\n\n  if (options.autostart) {\n    start();\n  }\n\n  this.start = function () {\n    start();\n  };\n\n  this.stop = function () {\n    stop();\n  };\n\n  this.isStreaming = function () {\n    return isStreaming;\n  };\n\n  function registerEventHandlers(options) {\n    that.registerHandlers(options.handlers);\n  }\n\n  function start() {\n    isStreaming = true;\n    check();\n\n    function check() {\n      var request = lastfm.request(\"user.getrecenttracks\", {\n        user: user,\n        limit: 1\n      });\n      request.on(\"success\", handleSuccess);\n      request.on(\"error\", bubbleError);\n\n      if (isStreaming) {\n        timeout = that.scheduleCallback(check, rate * 1000);\n      }\n    }\n\n    function handleSuccess(data) {\n      if (!data || !data.recenttracks || !data.recenttracks.track) {\n        that.emit(\"error\", new Error(\"Unexpected response\"));\n        return;\n      }\n\n      var tracks = data.recenttracks.track;\n\n      if (tracks instanceof Array) {\n        processNowPlaying(tracks[0]);\n        processLastPlay(tracks[1]);\n        return;\n      }\n\n      var track = tracks;\n\n      if (track[\"@attr\"] && track[\"@attr\"][\"nowplaying\"]) {\n        processNowPlaying(track);\n        return;\n      }\n\n      processLastPlay(track);\n\n      if (nowPlaying) {\n        that.emit(\"stoppedPlaying\", nowPlaying);\n        nowPlaying = null;\n      }\n    }\n\n    function bubbleError(error) {\n      that.emit(\"error\", error);\n    }\n  }\n\n  function processNowPlaying(track) {\n    var sameTrack = nowPlaying && nowPlaying.name == track.name;\n\n    if (!sameTrack) {\n      nowPlaying = track;\n      that.emit(\"nowPlaying\", track);\n    }\n  }\n\n  function processLastPlay(track) {\n    if (!lastPlay) {\n      lastPlay = track;\n      that.emit(\"lastPlayed\", track);\n      return;\n    }\n\n    var sameTrack = lastPlay.name == track.name;\n\n    if (!sameTrack) {\n      lastPlay = track;\n      that.emit(\"scrobbled\", track);\n    }\n  }\n\n  function stop() {\n    that.cancelCallback(timeout);\n    isStreaming = false;\n  }\n};\n\nRecentTracksStream.prototype = Object.create(LastFmBase.prototype);","map":{"version":3,"sources":["/home/diegofreitas/clone-lastfm-antigo/node_modules/lastfm/lib/lastfm/recenttracks-stream.js"],"names":["LastFmBase","require","RecentTracksStream","module","exports","lastfm","user","options","that","call","rate","isStreaming","timeout","lastPlay","nowPlaying","registerEventHandlers","autostart","start","stop","registerHandlers","handlers","check","request","limit","on","handleSuccess","bubbleError","scheduleCallback","data","recenttracks","track","emit","Error","tracks","Array","processNowPlaying","processLastPlay","error","sameTrack","name","cancelCallback","prototype","Object","create"],"mappings":"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","sourcesContent":["var LastFmBase = require(\"./lastfm-base\");\n\nvar RecentTracksStream = module.exports = function(lastfm, user, options) {\n  var that = this;\n  LastFmBase.call(this);\n  options = options || {};\n\n  var rate = 10\n    , isStreaming = false\n    , timeout\n    , lastPlay = null\n    , nowPlaying = null;\n\n  registerEventHandlers(options);\n\n  if (options.autostart) {\n    start();\n  }\n\n  this.start = function() {\n    start();\n  }\n\n  this.stop = function() {\n    stop();\n  }\n\n  this.isStreaming = function() {\n    return isStreaming;\n  }\n\n  function registerEventHandlers(options) {\n    that.registerHandlers(options.handlers);\n  }\n\n  function start() {\n    isStreaming = true;\n    check();\n\n    function check() {\n      var request = lastfm.request(\"user.getrecenttracks\", {\n        user: user,\n        limit: 1\n      });\n      request.on(\"success\", handleSuccess);\n      request.on(\"error\", bubbleError);\n      if (isStreaming) {\n        timeout = that.scheduleCallback(check, rate * 1000);\n      }\n    }\n\n    function handleSuccess(data) {\n      if (!data || !data.recenttracks || !data.recenttracks.track) {\n        that.emit(\"error\", new Error(\"Unexpected response\"));\n        return;\n      }\n\n      var tracks = data.recenttracks.track;\n      if (tracks instanceof Array) {\n        processNowPlaying(tracks[0]);\n        processLastPlay(tracks[1]);\n        return;\n      }\n\n      var track = tracks;\n      if (track[\"@attr\"] && track[\"@attr\"][\"nowplaying\"]) {\n        processNowPlaying(track);\n        return;\n      }\n    \n      processLastPlay(track);\n      if (nowPlaying) {\n        that.emit(\"stoppedPlaying\", nowPlaying);\n        nowPlaying = null;\n      }\n    }\n\n    function bubbleError(error) {\n      that.emit(\"error\", error);\n    }\n  }\n\n  function processNowPlaying(track) {\n    var sameTrack = (nowPlaying && nowPlaying.name == track.name);\n    if (!sameTrack) {\n      nowPlaying = track;\n      that.emit(\"nowPlaying\", track);\n    }\n  }\n\n  function processLastPlay(track) {\n    if (!lastPlay) {\n      lastPlay = track;\n      that.emit(\"lastPlayed\", track);\n      return;\n    }\n\n    var sameTrack = (lastPlay.name == track.name);\n    if (!sameTrack) {\n      lastPlay = track;\n      that.emit(\"scrobbled\", track);\n    }\n  }\n\n  function stop() {\n    that.cancelCallback(timeout);\n    isStreaming = false;\n  }\n};\n\nRecentTracksStream.prototype = Object.create(LastFmBase.prototype);\n"]},"metadata":{},"sourceType":"script"}