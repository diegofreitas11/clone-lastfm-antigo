{"ast":null,"code":"var _ = require(\"underscore\"),\n    LastFmBase = require(\"./lastfm-base\"),\n    retryOnErrors = [11, // Service offline\n16, // Temporarily unavailable\n29 // Rate limit exceeded\n],\n    retrySchedule = [10 * 1000, // 10 seconds\n30 * 1000, // 30 seconds\n60 * 1000, // 1 minute\n5 * 60 * 1000, // 5 minutes\n15 * 60 * 1000, // 15 minutes\n30 * 60 * 1000 // 30 minutes\n];\n\nvar LastFmUpdate = function (lastfm, method, session, options) {\n  var that = this;\n  options = options || {};\n  LastFmBase.call(this);\n  registerEventHandlers(options);\n\n  if (!session.isAuthorised()) {\n    this.emit(\"error\", {\n      error: 4,\n      message: \"Authentication failed\"\n    });\n    return;\n  }\n\n  if (method !== \"scrobble\" && method !== \"nowplaying\") {\n    return;\n  }\n\n  update(method, options);\n\n  function registerEventHandlers(options) {\n    that.registerHandlers(options.handlers);\n  }\n\n  function update(method, options) {\n    if (method == \"scrobble\" && !options.timestamp) {\n      that.emit(\"error\", {\n        error: 6,\n        message: \"Invalid parameters - Timestamp is required for scrobbling\"\n      });\n      return;\n    }\n\n    var retryCount = 0,\n        params = buildRequestParams(options),\n        requestMethod = method == \"scrobble\" ? \"track.scrobble\" : \"track.updateNowPlaying\";\n    makeRequest();\n\n    function makeRequest() {\n      var request = lastfm.request(requestMethod, params);\n      request.on(\"error\", errorCallback);\n      request.on(\"success\", successCallback);\n    }\n\n    function successCallback(response) {\n      if (response) {\n        that.emit(\"success\", options.track);\n      }\n    }\n\n    function errorCallback(error) {\n      if (shouldBeRetried(error)) {\n        var delay = delayFor(retryCount++),\n            retry = {\n          error: error.error,\n          message: error.message,\n          delay: delay\n        };\n        that.emit(\"retrying\", retry);\n        that.scheduleCallback(makeRequest, delay);\n        return;\n      }\n\n      bubbleError(error);\n    }\n\n    function shouldBeRetried(error) {\n      return method == \"scrobble\" && _(retryOnErrors).include(error.error);\n    }\n  }\n\n  function bubbleError(error) {\n    that.emit(\"error\", error);\n  }\n\n  function buildRequestParams(params) {\n    var requestParams = that.filterParameters(params);\n    requestParams.sk = session.key;\n    return requestParams;\n  }\n\n  function delayFor(retryCount) {\n    var index = Math.min(retryCount, retrySchedule.length - 1);\n    return retrySchedule[index];\n  }\n};\n\nLastFmUpdate.prototype = Object.create(LastFmBase.prototype);\nmodule.exports = LastFmUpdate;","map":{"version":3,"sources":["/home/diegofreitas/clone-lastfm-antigo/node_modules/lastfm/lib/lastfm/lastfm-update.js"],"names":["_","require","LastFmBase","retryOnErrors","retrySchedule","LastFmUpdate","lastfm","method","session","options","that","call","registerEventHandlers","isAuthorised","emit","error","message","update","registerHandlers","handlers","timestamp","retryCount","params","buildRequestParams","requestMethod","makeRequest","request","on","errorCallback","successCallback","response","track","shouldBeRetried","delay","delayFor","retry","scheduleCallback","bubbleError","include","requestParams","filterParameters","sk","key","index","Math","min","length","prototype","Object","create","module","exports"],"mappings":"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","sourcesContent":["var _ = require(\"underscore\")\n  , LastFmBase = require(\"./lastfm-base\")\n  , retryOnErrors = [\n      11,                 // Service offline\n      16,                 // Temporarily unavailable\n      29                  // Rate limit exceeded\n    ]\n  , retrySchedule = [\n      10 * 1000,          // 10 seconds\n      30 * 1000,          // 30 seconds\n      60 * 1000,          // 1 minute\n      5 * 60 * 1000,      // 5 minutes\n      15 * 60 * 1000,     // 15 minutes\n      30 * 60 * 1000      // 30 minutes\n    ];\n\nvar LastFmUpdate = function(lastfm, method, session, options) {\n  var that = this;\n  options = options || { };\n  LastFmBase.call(this);\n\n  registerEventHandlers(options);\n    \n  if (!session.isAuthorised()) {\n    this.emit(\"error\", {\n      error: 4,\n      message: \"Authentication failed\"\n    });\n    return;\n  }\n  if (method !== \"scrobble\" && method !== \"nowplaying\") {\n    return;\n  }\n  update(method, options); \n\n  function registerEventHandlers(options) {\n    that.registerHandlers(options.handlers);\n  }\n  \n  function update(method, options) {\n    if (method == \"scrobble\" && !options.timestamp) {\n      that.emit(\"error\", {\n        error: 6,\n        message: \"Invalid parameters - Timestamp is required for scrobbling\"\n      });\n      return;\n    }\n\n    var retryCount = 0\n      , params = buildRequestParams(options)\n      , requestMethod = method == \"scrobble\" ? \"track.scrobble\" : \"track.updateNowPlaying\";\n    makeRequest();\n\n    function makeRequest() {\n      var request = lastfm.request(requestMethod, params);\n      request.on(\"error\", errorCallback);\n      request.on(\"success\", successCallback);\n    }\n\n    function successCallback(response) {\n      if (response) {\n        that.emit(\"success\", options.track);\n      }\n    }\n\n    function errorCallback(error) {\n      if (shouldBeRetried(error)) {\n        var delay = delayFor(retryCount++)\n          , retry = {\n              error: error.error,\n              message: error.message,\n              delay: delay\n            };\n        that.emit(\"retrying\", retry);\n        that.scheduleCallback(makeRequest, delay);\n        return;\n      }\n      bubbleError(error);\n    }\n\n    function shouldBeRetried(error) {\n      return method == \"scrobble\" && _(retryOnErrors).include(error.error)\n    }\n  }\n\n  function bubbleError(error) {\n    that.emit(\"error\", error);\n  }\n\n  function buildRequestParams(params) {\n    var requestParams = that.filterParameters(params);\n    requestParams.sk = session.key;\n    return requestParams;\n  }\n\n  function delayFor(retryCount) {\n    var index = Math.min(retryCount, retrySchedule.length - 1);\n    return retrySchedule[index];\n  }\n}\n\nLastFmUpdate.prototype = Object.create(LastFmBase.prototype);\n\nmodule.exports = LastFmUpdate;\n"]},"metadata":{},"sourceType":"script"}